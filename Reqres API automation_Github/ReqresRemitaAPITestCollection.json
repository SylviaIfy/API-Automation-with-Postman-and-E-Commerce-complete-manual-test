{
	"info": {
		"_postman_id": "391da58a-7de1-4604-838e-4cc502062edc",
		"name": "Reqres_Remita API Test",
		"description": "Collection created to answer the **Remita Intermediate QA Interview - Phase 1** Practical Question 1.\n\n<u><b>Question:</b></u>\n\nUsing the URL below, select any random 10 requests (minus the NOT FOUND options) and implement at least 3 automated test cases on each request chosen to result in a total of at least 30 automated test cases.\n\nAlong with your documentation, submit the newman report in .html format.  \nURL: [https://reqres.in/](https://reqres.in/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26273306",
		"_collection_link": "https://cloudy-crater-603869.postman.co/workspace/Personal-Practice-workpace~3dbbd93b-b0a0-424d-987e-45f68b5fc328/collection/26273306-391da58a-7de1-4604-838e-4cc502062edc?action=share&source=collection_link&creator=26273306"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"",
							"console.log(response.data[0].id);",
							"console.log(response.data[0].email);",
							"console.log(response.data[0].first_name);",
							"console.log(response.data[0].last_name);",
							"console.log(response.data[0].avatar);",
							"",
							"pm.test(\"Body contains email address\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data[0].email);",
							"});",
							"",
							"pm.test(\"Body contains User ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data[0].id);",
							"});",
							"",
							"pm.test(\"Response time is less than 400ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}users?page=1",
					"host": [
						"{{baseUrl}}users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": [
				{
					"name": "List Users",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}users?page=2",
							"host": [
								"{{baseUrl}}users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 01:08:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1703671287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7kQOuTxS%2Bakj8N5%2BbvWrSmjDPpAjZUiSRxE9YNVS600%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1703671287&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7kQOuTxS%2Bakj8N5%2BbvWrSmjDPpAjZUiSRxE9YNVS600%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "4318"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83e6df312ec63694-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 2,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 7,\n            \"email\": \"michael.lawson@reqres.in\",\n            \"first_name\": \"Michael\",\n            \"last_name\": \"Lawson\",\n            \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\n        },\n        {\n            \"id\": 8,\n            \"email\": \"lindsay.ferguson@reqres.in\",\n            \"first_name\": \"Lindsay\",\n            \"last_name\": \"Ferguson\",\n            \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\n        },\n        {\n            \"id\": 9,\n            \"email\": \"tobias.funke@reqres.in\",\n            \"first_name\": \"Tobias\",\n            \"last_name\": \"Funke\",\n            \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\n        },\n        {\n            \"id\": 10,\n            \"email\": \"byron.fields@reqres.in\",\n            \"first_name\": \"Byron\",\n            \"last_name\": \"Fields\",\n            \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\n        },\n        {\n            \"id\": 11,\n            \"email\": \"george.edwards@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Edwards\",\n            \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\n        },\n        {\n            \"id\": 12,\n            \"email\": \"rachel.howell@reqres.in\",\n            \"first_name\": \"Rachel\",\n            \"last_name\": \"Howell\",\n            \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"",
							"console.log(response.data.id);",
							"console.log(response.data.email);",
							"console.log(response.data.first_name);",
							"console.log(response.data.last_name);",
							"console.log(response.data.avatar);",
							"",
							"pm.test(\"Searching for User 6\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.eql(6);",
							"});",
							"",
							"pm.test(\"Body contains User ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data.id);",
							"});",
							"",
							"pm.test(\"Body contains User First Name\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data.first_name);",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}users/6",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"6"
					]
				}
			},
			"response": [
				{
					"name": "Single User",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}users/2",
							"host": [
								"{{baseUrl}}users"
							],
							"path": [
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 01:10:45 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1703925334&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=b6xxVjBQj1UxH3mO12n%2FNHOlAN3Dht6RBtl4uZ2kAPc%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1703925334&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=b6xxVjBQj1UxH3mO12n%2FNHOlAN3Dht6RBtl4uZ2kAPc%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"118-pbdwwFo9SKNhD3Lx5iHJyngpq00\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "HIT"
						},
						{
							"key": "Age",
							"value": "936"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83e6e263bc933694-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "List resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"",
							"console.log(response.page);",
							"console.log(response.total);",
							"console.log(response.per_page);",
							"console.log(response.data[5].id);",
							"console.log(response.data[4].pantone_value);",
							"",
							"",
							"pm.test(\"Body contains number of entries per page\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.per_page);",
							"});",
							"",
							"pm.test(\"Body contains User with ID 6 \", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data[5].id);",
							"});",
							"",
							"pm.test(\"Response time is less than 400ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"pm.test(\"Body contains pantone value\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data[4].pantone_value);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}unknown",
					"host": [
						"{{baseUrl}}unknown"
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}unknown",
							"host": [
								"{{baseUrl}}unknown"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 01 Jan 2024 01:13:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1703974721&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8yfHb8tCXnhTUsihO%2FqPxrv3BLh7rlAhMACKb7%2Bcjg4%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1703974721&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8yfHb8tCXnhTUsihO%2FqPxrv3BLh7rlAhMACKb7%2Bcjg4%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Etag",
							"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						},
						{
							"key": "Cache-Control",
							"value": "max-age=14400"
						},
						{
							"key": "CF-Cache-Status",
							"value": "REVALIDATED"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "83e6e62ceaca3694-LHR"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "Single resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"",
							"console.log(response.data.id);",
							"console.log(response.data.name);",
							"console.log(response.data.year);",
							"console.log(response.data.color);",
							"",
							"pm.test(\"Searching for User 8\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.eql(8);",
							"});",
							"",
							"pm.test(\"Body contains User ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data.id);",
							"});",
							"",
							"pm.test(\"Body contains Colour Name\", function () {",
							"    pm.expect(pm.response.text()).to.include(response.data.name);",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}unknown/8",
					"host": [
						"{{baseUrl}}unknown"
					],
					"path": [
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.name);",
							"",
							"pm.test(\"Confirm Body contains id\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"pm.test(\"User called Sylvia O was created\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Sylvia O\");",
							"});",
							"",
							"pm.test(\"Confirm Body contains CreatedAt\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Status code should have the text Created\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sylvia O\",\n    \"job\": \"QA Engineer\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users",
					"host": [
						"{{baseUrl}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.name);",
							"console.log(response.job);",
							"console.log(response.updatedAt);",
							"",
							"pm.test(\"Confirm Body contains name\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"pm.test(\"Confirm Body contains job\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"job\");",
							"});",
							"",
							"",
							"pm.test(\"Confirm Body contains updatedAt\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");",
							"});",
							"",
							"pm.test(\"Confirm job was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.job).to.eql(\"Pastress\");",
							"});",
							"",
							"pm.test(\"Response time is less than 250ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(250);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Mother Hen\",\n    \"job\": \"Pastress\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/3",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.name);",
							"console.log(response.job);",
							"console.log(response.updatedAt);",
							"",
							"pm.test(\"Confirm Body contains name\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"pm.test(\"Confirm Body contains job\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"job\");",
							"});",
							"",
							"",
							"pm.test(\"Confirm Body contains updatedAt\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");",
							"});",
							"",
							"pm.test(\"Confirm name was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");",
							"});",
							"",
							"pm.test(\"Confirm job was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");",
							"});",
							"",
							"pm.test(\"Response time is less than 250ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(250);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}users/2",
					"host": [
						"{{baseUrl}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"GeorgeToken\");",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"GeorgeToken\", jsonData.token);",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.id);",
							"console.log(response.token);",
							"",
							"pm.test(\"Confirm Body contains id\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Confirm token was created\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"token\");",
							"});",
							"",
							"pm.test(\"Response time is less than 250ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(250);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"george.bluth@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}register",
					"host": [
						"{{baseUrl}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.error);",
							"",
							"pm.test(\"Confirm Body contains error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"pm.test(\"Confirm error message is user-intuitive\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");",
							"});",
							"",
							"pm.test(\"Response time is less than 250ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(250);",
							"});",
							"",
							"pm.test(\"Status code should have the text Bad Request\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}register",
					"host": [
						"{{baseUrl}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.get(\"GeorgeToken\");",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"GeorgeToken\", jsonData.token);",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"console.log(response);",
							"console.log(response.token);",
							"",
							"pm.test(\"Confirm token was generated\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"token\");",
							"});",
							"",
							"pm.test(\"Response time is less than 350ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(350);",
							"});",
							"",
							"pm.test(\"Status code should have the text OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"george.bluth@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}login",
					"host": [
						"{{baseUrl}}login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api/",
			"type": "string"
		},
		{
			"key": "GeorgeToken",
			"value": ""
		}
	]
}